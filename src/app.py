import base64
import datetime
import io

import dash_bootstrap_components as dbc

import dash
from dash.dependencies import Input, Output, State
from dash import dcc, html, dash_table

import pandas as pd

from ml import make_prediction
import requests

from tools import extract_features

# external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']
external_stylesheets = ['https://bootswatch.com/5/simplex/bootstrap.css']

app = dash.Dash(__name__, external_stylesheets=external_stylesheets)
# app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])
# app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])
# 
app.layout = html.Div([

    # html.Div(html.H3('PDF detect',style={'margin':'10px 0px 50px 20px'}), ),
    dbc.Row(dbc.Col(html.H3("PDF Detect"),
                        # style={'margin':'10px 0px 50px 20px'},
                        style={'margin':'20px 0 50px 20px'},
                        # width={'size':2,},
                        ),
                ),
                
    dbc.Row([
    # html.Div(

    #     dcc.Upload(
    #         id='upload-data',
    #         children=html.Div([
    #             'Drag and Drop or ',
    #             html.A('Select Files')
    #         ]),
    #         style={
    #             'width': '20%',
    #             'height': '60px',
    #             'lineHeight': '60px',
    #             'borderWidth': '1px',
    #             'borderStyle': 'dashed',
    #             'borderRadius': '5px',
    #             'textAlign': 'center',
    #             'margin': '10px',

    #         },
    #         # Allow multiple files to be uploaded
    #         multiple=True
    #     ), ),

       
        dcc.Tabs(id="tabs-example-graph", value='tab-1-example-graph', children=[
            dcc.Tab(label='Drag and Drop PDF', value='tab-1-example-graph', children=[
                    html.Div(

                    dcc.Upload(
                        id='upload-data',
                        children=html.Div([
                            'Drag and Drop or ',
                            html.A('Select Files')
                        ]),
                        style={
                            'width': '20%',
                            'height': '60px',
                            'lineHeight': '60px',
                            'borderWidth': '1px',
                            'borderStyle': 'dashed',
                            'borderRadius': '5px',
                            'textAlign': 'center',
                            'margin': '10px',

                        },
                        # Allow multiple files to be uploaded
                        multiple=True
                    ), ),
            ]),

            dcc.Tab(label='URL search PDF', value='tab-2-example-graph', children=[

                dbc.Row( 
                    html.Div([
                        dcc.Input(id='input-on-submit', type='text', placeholder="Enter PDF's url...",
                        style={'marginRight':'10px'}),
                        html.Button('Submit', id='submit-val'),
                        
                    ],style={'margin':'10px 0 50px 20px'}),
                ),

            ]),

        ], style={'width':'50%'}),
    ], ),

    # dbc.Row(  html.Div([
    #     dcc.Input(id='input-on-submit', type='text', placeholder="Enter PDF's url..."),
    #     html.Button('Submit', id='submit-val'),
    # ],style={'margin':'10px 0 50px 20px'}),
    # ),
        
    # html.Div(id='container-button-basic',
    #          children='Enter a value and press submit'),

    html.Div(id='output-data-upload'),
    html.Div(id='output-data-search'),
])

from base64 import b64decode

columns= ['header', 'obj', 'endobj', 'stream', 'endstream', 'xref', 'trailer',
       'startxref', '/Page', '/Encrypt', '/ObjStm', '/JS', '/JavaScript',
       '/AA', '/OpenAction', '/AcroForm', '/JBIG2Decode', '/RichMedia',
       '/Launch', '/EmbeddedFile', '/XFA', '/Colors > 2^24',]

def parse_contents(contents, filename, date):
    # print(contents)
    content_type, content_string = contents.split(',')
    print(content_type, )
    # decoded = base64.b64decode(content_string)
    try:
        # if 'pdf' in filename:
            # Assume that the user uploaded a CSV file
            # pdf =  decoded

        # Decode the Base64 string, making sure that it contains only valid characters
        bytes = b64decode(content_string, validate=True)

        
        # Write the PDF contents to a local file
        loc = '../temp/'+filename
        f = open(loc, 'wb')
        f.write(bytes)
        f.close()
        # Declare numpy array

        # df = pd.DataFrame([extract_features(nparray)])
        df = pd.DataFrame([extract_features(loc)])[columns]

        pred = make_prediction(df)
        if pred == 'Bening (Good)':
            text_color = 'green'
        else:
            text_color = 'red'

        print(df)
    except Exception as e:
        print(e)
        return html.Div([
            'There was an error processing this file.'
        ])

    return html.Div([
        html.H5('With Drag & Drop', style={'margin':'40px 0 10px 0', 'color':'blue'}),

        html.H5(filename),
        html.H6(datetime.datetime.fromtimestamp(date)),

        dash_table.DataTable(
            df.to_dict('records'),
            [{'name': i, 'id': i} for i in df.columns],
              fixed_columns={'headers': True, 'data': 1},
             style_table={'minWidth': '100%'}
        ),

        html.Hr(),  # horizontal line

        # For debugging, display the raw contents provided by the web browser
        html.Div('Prediction'),
        html.Pre(pred + '...', style={
            'whiteSpace': 'pre-wrap',
            'wordBreak': 'break-all',
            "color": text_color
        })
    ],style={
            'margin': '10px 0 0 50px',
            
        })

@app.callback(Output('output-data-upload', 'children'),
              Input('upload-data', 'contents'),
              State('upload-data', 'filename'),
              State('upload-data', 'last_modified'))
def update_output(list_of_contents, list_of_names, list_of_dates):
    if list_of_contents is not None:
        children = [
            parse_contents(c, n, d) for c, n, d in
            zip(list_of_contents, list_of_names, list_of_dates)]
        return children




def url_contents(url):
    
    print('\n--url_contents triggerd')
    # url = 'https://www.cs.cornell.edu/home/llee/papers/cutsent.pdf'
    r = requests.get(url, stream=True)

    # content = r.content
    filename = r.url.split('/')[-1]
    path = '../temp/'+filename

    with open(path, 'wb') as fd:
        fd.write(r.content)
        fd.close()

    print(filename)
    try:
        # if 'pdf' in filename.split('.'):
            

        print(filename)
        
        df = pd.DataFrame([extract_features(path)])[columns]

        pred = make_prediction(df)
        if pred == 'Bening (Good)':
            text_color = 'green'
        else:
            text_color = 'red'
            
    except Exception as e:
        print(e)
        return html.Div([
            'There was an error processing this file.'
        ])

    return html.Div([
        html.H5('With URL search', style={'margin':'40px 0 10px 0','color':'blue'}),

        html.H5(filename),
        # html.H6(datetime.datetime.fromtimestamp(date)),

        dash_table.DataTable(
            df.to_dict('records'),
            [{'name': i, 'id': i} for i in df.columns],
              fixed_columns={'headers': True, 'data': 1},
             style_table={'minWidth': '100%'},
  
        ),

        html.Hr(),  # horizontal line

        # For debugging, display the raw contents provided by the web browser
        html.Div('Prediction'),
        html.Pre(pred + '...', style={
            'whiteSpace': 'pre-wrap',
            'wordBreak': 'break-all',
            "color": text_color
        })
    ],style={
            'margin': '10px 0 0 50px',
        })


@app.callback(

    Output('output-data-search', 'children'),
    Input('submit-val', 'n_clicks'),
    State('input-on-submit', 'value')
)
def update_output( n_clicks, value ):

    if n_clicks is None:
        # PreventUpdate prevents ALL outputs updating
        raise dash.exceptions.PreventUpdate

    children = url_contents(value)

    return children
    
        


if __name__ == '__main__':
    app.run_server(debug=True)
